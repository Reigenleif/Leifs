{"ast":null,"code":"var _jsxFileName = \"D:\\\\Ambisqu\\\\React_Course\\\\Projects\\\\project_2_leifs\\\\src\\\\Storage\\\\CartContext.js\",\n    _s = $RefreshSig$();\n\nimport react, { useState, useContext, useEffect } from \"react\";\nimport FoodContext from \"./FoodContext\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CartContext = /*#__PURE__*/react.createContext({\n  cart: {},\n  updateCart: () => {},\n  getTotalCount: () => {},\n  getTotalPrice: () => {}\n});\nexport const CartContextProvider = props => {\n  _s();\n\n  const [food, setFood] = useState();\n  useEffect();\n  const [cart, setCart] = useState({\n    \"1001\": 1\n  });\n\n  const updateCartHandler = (method, foodId) => {\n    setCart(prevState => {\n      const newcart = prevState;\n\n      if (!(foodId in newcart)) {\n        cart[foodId] = 0;\n      }\n\n      if (method === \"add\") {\n        cart[foodId] += 1;\n      }\n\n      if (method === \"del\") {\n        cart[foodId] -= 1;\n      }\n\n      return newcart;\n    });\n  };\n\n  const getTotalCount = () => {\n    let count = 0;\n\n    for (let key in cart) {\n      count += cart[key];\n    }\n\n    return count;\n  };\n\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: {\n      cart: cart,\n      updateCart: (method, foodId) => {\n        updateCartHandler(method, foodId);\n      },\n      getTotalCount: getTotalCount\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CartContextProvider, \"498ZADP/FV4tDddwlWedhxoW0cw=\");\n\n_c = CartContextProvider;\nexport default CartContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartContextProvider\");","map":{"version":3,"sources":["D:/Ambisqu/React_Course/Projects/project_2_leifs/src/Storage/CartContext.js"],"names":["react","useState","useContext","useEffect","FoodContext","CartContext","createContext","cart","updateCart","getTotalCount","getTotalPrice","CartContextProvider","props","food","setFood","setCart","updateCartHandler","method","foodId","prevState","newcart","count","key","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,MAAMC,WAAW,gBAAGL,KAAK,CAACM,aAAN,CAAoB;AACtCC,EAAAA,IAAI,EAAE,EADgC;AAEtCC,EAAAA,UAAU,EAAE,MAAM,CAAE,CAFkB;AAGtCC,EAAAA,aAAa,EAAE,MAAM,CAAE,CAHe;AAItCC,EAAAA,aAAa,EAAE,MAAM,CAAE;AAJe,CAApB,CAApB;AAOA,OAAO,MAAMC,mBAAmB,GAAIC,KAAD,IAAW;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,EAAhC;AAEAE,EAAAA,SAAS;AAIT,QAAM,CAACI,IAAD,EAAOQ,OAAP,IAAkBd,QAAQ,CAAC;AAC/B,YAAQ;AADuB,GAAD,CAAhC;;AAIA,QAAMe,iBAAiB,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC5CH,IAAAA,OAAO,CAAEI,SAAD,IAAe;AACrB,YAAMC,OAAO,GAAGD,SAAhB;;AACA,UAAI,EAAED,MAAM,IAAIE,OAAZ,CAAJ,EAA0B;AACxBb,QAAAA,IAAI,CAACW,MAAD,CAAJ,GAAe,CAAf;AACD;;AACD,UAAID,MAAM,KAAK,KAAf,EAAsB;AACpBV,QAAAA,IAAI,CAACW,MAAD,CAAJ,IAAgB,CAAhB;AACD;;AACD,UAAID,MAAM,KAAK,KAAf,EAAsB;AACpBV,QAAAA,IAAI,CAACW,MAAD,CAAJ,IAAgB,CAAhB;AACD;;AACD,aAAOE,OAAP;AACD,KAZM,CAAP;AAaD,GAdD;;AAgBA,QAAMX,aAAa,GAAG,MAAM;AAC1B,QAAIY,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAIC,GAAT,IAAgBf,IAAhB,EAAsB;AACpBc,MAAAA,KAAK,IAAId,IAAI,CAACe,GAAD,CAAb;AACD;;AACD,WAAOD,KAAP;AACD,GAND;;AAQA,sBACE,QAAC,WAAD,CAAa,QAAb;AACE,IAAA,KAAK,EAAE;AACLd,MAAAA,IAAI,EAAEA,IADD;AAELC,MAAAA,UAAU,EAAE,CAACS,MAAD,EAASC,MAAT,KAAoB;AAC9BF,QAAAA,iBAAiB,CAACC,MAAD,EAASC,MAAT,CAAjB;AACD,OAJI;AAKLT,MAAAA,aAAa,EAAEA;AALV,KADT;AAAA,cAUGG,KAAK,CAACW;AAVT;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAjDM;;GAAMZ,mB;;KAAAA,mB;AAmDb,eAAeN,WAAf","sourcesContent":["import react, { useState, useContext, useEffect } from \"react\";\r\nimport FoodContext from \"./FoodContext\";\r\n\r\nconst CartContext = react.createContext({\r\n  cart: {},\r\n  updateCart: () => {},\r\n  getTotalCount: () => {},\r\n  getTotalPrice: () => {}\r\n});\r\n\r\nexport const CartContextProvider = (props) => {\r\n  const [food, setFood] = useState()\r\n\r\n  useEffect(\r\n    \r\n  )\r\n\r\n  const [cart, setCart] = useState({\r\n    \"1001\": 1,\r\n  });\r\n\r\n  const updateCartHandler = (method, foodId) => {\r\n    setCart((prevState) => {\r\n      const newcart = prevState;\r\n      if (!(foodId in newcart)) {\r\n        cart[foodId] = 0;\r\n      }\r\n      if (method === \"add\") {\r\n        cart[foodId] += 1;\r\n      }\r\n      if (method === \"del\") {\r\n        cart[foodId] -= 1;\r\n      }\r\n      return newcart;\r\n    });\r\n  };\r\n\r\n  const getTotalCount = () => {\r\n    let count = 0\r\n    for (let key in cart) { \r\n      count += cart[key]\r\n    }\r\n    return count\r\n  }\r\n\r\n  return (\r\n    <CartContext.Provider\r\n      value={{\r\n        cart: cart,\r\n        updateCart: (method, foodId) => {\r\n          updateCartHandler(method, foodId);\r\n        },\r\n        getTotalCount: getTotalCount,\r\n\r\n      }}\r\n    >\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartContext;\r\n"]},"metadata":{},"sourceType":"module"}