{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\"; // General GET request\n\nexport function useGet(URL) {\n  _s();\n\n  let dataMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : e => e;\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const fetchData = useCallback(async () => {\n    setLoading(true);\n    let res;\n\n    try {\n      const rsp = await fetch(URL);\n\n      if (!rsp.ok) {\n        throw new Error(\"Something Went Wrong\");\n      }\n\n      const data = await rsp.json();\n      const results = data.results.map(data => dataMapping(data));\n    } catch (err) {\n      console.log(err);\n      setError(err);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(false);\n    return results;\n  }, []);\n  return [fetchData, loading, {\n    setLoading: setLoading,\n    fetchedData: fetchData(),\n    error: error\n  }];\n} // GET request firebase specific\n// dataMapping is a function which input is the response's individual object and returns results's individual element\n\n_s(useGet, \"2ThqQ2yt0bzJNmUdxfevmcu0r20=\");\n\nexport function useGetFB(URL) {\n  _s2();\n\n  let dataMapping = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (obj, key) => obj;\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const fetchData = useCallback(async () => {\n    try {\n      const rsp = await fetch(URL);\n\n      if (!rsp.ok) {\n        throw new Error(\"Something Went Wrong\");\n      }\n\n      const data = await rsp.json();\n      let results = [];\n\n      for (key in data) {\n        results.push(dataMapping(data[key], key));\n      }\n    } catch (err) {\n      console.log(err);\n      setError(err);\n      setLoading(false);\n      return;\n    }\n\n    setLoading(false);\n    return results;\n  }, []);\n  return [fetchData, loading, {\n    setLoading: setLoading,\n    fetchedData: fetchData(),\n    error: error\n  }];\n} // POST request firebase specific\n\n_s2(useGetFB, \"2ThqQ2yt0bzJNmUdxfevmcu0r20=\");\n\nexport function usePostFB(URL) {\n  _s3();\n\n  const [error, setError] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const postData = useCallback(async data => {\n    try {\n      const rsp = await fetch(URL, {\n        method: \"POST\",\n        headers: {\n          \"content-type\": \"application/JSON\"\n        },\n        body: data\n      });\n\n      if (!rsp.ok) {\n        throw new Error(\"Something Went Wrong\");\n      }\n    } catch (err) {\n      setError(err);\n      setLoading(false);\n      console.log(err);\n    }\n\n    setLoading(false);\n  });\n  return [postData, error];\n}\n\n_s3(usePostFB, \"lZnL0ZqcE6dDMLj/7tagbxVMTdk=\");","map":{"version":3,"sources":["D:/Projects/Common/leifs/src/Meta/use-fetch.js"],"names":["useCallback","useState","useGet","URL","dataMapping","e","loading","setLoading","error","setError","fetchData","res","rsp","fetch","ok","Error","data","json","results","map","err","console","log","fetchedData","useGetFB","obj","key","push","usePostFB","postData","method","headers","body"],"mappings":"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","sourcesContent":["import { useCallback, useState } from \"react\";\r\n\r\n// General GET request\r\nexport function useGet(URL, dataMapping = (e) => e) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const fetchData = useCallback(async () => {\r\n    setLoading(true);\r\n    let res\r\n    try {\r\n      const rsp = await fetch(URL);\r\n      if (!rsp.ok) {\r\n        throw new Error(\"Something Went Wrong\");\r\n      }\r\n\r\n      const data = await rsp.json();\r\n      const results = data.results.map((data) => dataMapping(data));\r\n    } catch (err) {\r\n      console.log(err);\r\n      setError(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setLoading(false);\r\n    return results;\r\n  }, []);\r\n\r\n  return [\r\n    fetchData,\r\n    loading,\r\n    { setLoading: setLoading, fetchedData: fetchData(), error: error },\r\n  ];\r\n}\r\n\r\n// GET request firebase specific\r\n// dataMapping is a function which input is the response's individual object and returns results's individual element\r\nexport function useGetFB(URL, dataMapping = (obj, key) => obj) {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const fetchData = useCallback(async () => {\r\n    try {\r\n      const rsp = await fetch(URL);\r\n      if (!rsp.ok) {\r\n        throw new Error(\"Something Went Wrong\");\r\n      }\r\n\r\n      const data = await rsp.json();\r\n\r\n      let results = [];\r\n      for (key in data) {\r\n        results.push(dataMapping(data[key], key));\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n      setError(err);\r\n      setLoading(false);\r\n      return;\r\n    }\r\n    setLoading(false);\r\n    return results;\r\n  }, []);\r\n\r\n  return [\r\n    fetchData,\r\n    loading,\r\n    { setLoading: setLoading, fetchedData: fetchData(), error: error },\r\n  ];\r\n}\r\n\r\n// POST request firebase specific\r\nexport function usePostFB(URL) {\r\n  const [error, setError] = useState(\"\");\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const postData = useCallback(async (data) => {\r\n    try {\r\n      const rsp = await fetch(URL, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"content-type\": \"application/JSON\",\r\n        },\r\n        body: data,\r\n      });\r\n\r\n      if (!rsp.ok) {\r\n        throw new Error(\"Something Went Wrong\");\r\n      }\r\n    } catch (err) {\r\n      setError(err);\r\n      setLoading(false);\r\n      console.log(err);\r\n    }\r\n    setLoading(false);\r\n  });\r\n\r\n  return [postData, error];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}